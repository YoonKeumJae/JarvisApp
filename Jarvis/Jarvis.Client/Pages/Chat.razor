@page "/"
@using System.Net.Http.Json
@using System.Text.Json
@using Markdig
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject IJSRuntime JS

<div class="chat-center-wrapper">
    <div class="d-flex flex-column align-items-center w-100" style="min-height:60vh;">
        <div class="mb-3 w-100 d-flex justify-content-center">
            @if (string.IsNullOrEmpty(SessionId))
            {
                <button class="btn btn-primary" @onclick="CreateSession">세션 시작</button>
            }
            else
            {
                <button class="btn btn-danger me-2" @onclick="EndSession">세션 종료</button>
            }
        </div>

        <div class="chat-box flex-grow-1 w-100 mb-3 p-2 rounded" id="chatBox" style="max-width:600px; min-height:300px; background:var(--chat-bg);">
            @if (Messages.Count == 0)
            {
                <div class="text-center text-muted mt-5">대화를 시작해보세요!</div>
            }
            else
            {
                @foreach (var msg in Messages)
                {
                    <div class="d-flex mb-2 @(msg.IsUser ? "justify-content-end" : "justify-content-start")">
                        <div class="bubble @(msg.IsUser ? "user" : "bot")">
                            @if (msg.IsUser)
                            {
                                @msg.Text
                            }
                            else
                            {
                                @((MarkupString)ToMarkdownHtml(msg.Text))
                            }
                        </div>
                    </div>
                }
            }
        </div>

        <EditForm Model="this" OnValidSubmit="SendMessage">
            <div class="input-group" style="max-width:600px;">
                <input class="form-control" @bind="Input" placeholder="메시지를 입력하세요..." @onkeydown="OnKeyDown" disabled="@(string.IsNullOrEmpty(SessionId) || Loading)" @ref="inputRef" autofocus />
                <button class="btn btn-success" type="submit" disabled="@(string.IsNullOrEmpty(SessionId) || Loading || string.IsNullOrWhiteSpace(Input))">
                    전송
                </button>
                @if (Loading)
                {
                    <span class="input-group-text bg-transparent border-0">
                        <span class="spinner-border spinner-border-sm text-primary" role="status" aria-hidden="true"></span>
                    </span>
                }
            </div>
        </EditForm>
    </div>
    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger mt-3">@Error</div>
    }
</div>

@code {
    public class ChatMessage { public string Text { get; set; } = string.Empty; public bool IsUser { get; set; } }
    List<ChatMessage> Messages = new();
    string? SessionId;
    string Input = string.Empty;
    string? Error;
    bool Loading = false;
    ElementReference inputRef;
    int lastMessageCount = 0;

    string ToMarkdownHtml(string text)
    {
        return Markdown.ToHtml(text ?? string.Empty, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }

    async Task CreateSession()
    {
        Error = null;
        var res = await Http.PostAsync("/session", null);
        if (res.IsSuccessStatusCode)
        {
            var obj = await res.Content.ReadFromJsonAsync<JsonElement>();
            SessionId = obj.GetProperty("sessionId").GetString();
            Messages.Clear();
            await ScrollToBottom();
            await FocusInput();
        }
        else
        {
            Error = "세션 생성 실패";
        }
    }

    async Task EndSession()
    {
        Error = null;
        if (SessionId == null) return;
        var res = await Http.DeleteAsync($"/session/{SessionId}");
        if (res.IsSuccessStatusCode)
        {
            SessionId = null;
            Messages.Clear();
            await ScrollToBottom();
            await FocusInput();
        }
        else
        {
            Error = "세션 종료 실패";
        }
    }

    async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(Input) || string.IsNullOrEmpty(SessionId)) return;
        Error = null;
        Loading = true;
        var userMsg = Input;
        Messages.Add(new ChatMessage { Text = userMsg, IsUser = true });
        Input = string.Empty;
        StateHasChanged();
        await FocusInput();
        await ScrollToBottom();
        try
        {
            var res = await Http.PostAsJsonAsync("/chat", new { sessionId = SessionId, message = userMsg });
            if (res.IsSuccessStatusCode)
            {
                var obj = await res.Content.ReadFromJsonAsync<JsonElement>();
                var botMsg = obj.GetProperty("response").GetString();
                Messages.Add(new ChatMessage { Text = botMsg ?? "", IsUser = false });
                StateHasChanged();
                await ScrollToBottom();
                await Task.Delay(10);
                await FocusInput();
            }
            else
            {
                var err = await res.Content.ReadFromJsonAsync<JsonElement>();
                Error = err.TryGetProperty("error", out var e) ? e.GetString() : "오류 발생";
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        finally
        {
            Loading = false;
        }
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !string.IsNullOrWhiteSpace(Input) && !Loading)
        {
            _ = SendMessage();
        }
    }

    async Task ScrollToBottom()
    {
        await Task.Delay(50); // 렌더링 대기
        await JS.InvokeVoidAsync("scrollChatToBottom", "chatBox");
    }

    async Task FocusInput()
    {
        await JS.InvokeVoidAsync("focusInputElement", inputRef);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Messages.Count != lastMessageCount)
        {
            lastMessageCount = Messages.Count;
            await Task.Delay(10);
            await FocusInput();
        }
    }
} 